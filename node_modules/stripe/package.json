{
  "_args": [
    [
      {
        "raw": "stripe@^5.6.1",
        "scope": null,
        "escapedName": "stripe",
        "name": "stripe",
        "rawSpec": "^5.6.1",
        "spec": ">=5.6.1 <6.0.0",
        "type": "range"
      },
      "G:\\LambdaHW\\loanie-deploy\\loanie"
    ]
  ],
  "_from": "stripe@>=5.6.1 <6.0.0",
  "_id": "stripe@5.8.0",
  "_inCache": true,
  "_location": "/stripe",
  "_nodeVersion": "9.3.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/stripe_5.8.0_1522881153981_0.37441967305007173"
  },
  "_npmUser": {
    "name": "brandur",
    "email": "brandur@mutelight.org"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "stripe@^5.6.1",
    "scope": null,
    "escapedName": "stripe",
    "name": "stripe",
    "rawSpec": "^5.6.1",
    "spec": ">=5.6.1 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/stripe/-/stripe-5.8.0.tgz",
  "_shasum": "4a3703360da2070be0e74395d6554c5771d173c3",
  "_shrinkwrap": null,
  "_spec": "stripe@^5.6.1",
  "_where": "G:\\LambdaHW\\loanie-deploy\\loanie",
  "author": {
    "name": "Stripe",
    "email": "support@stripe.com",
    "url": "https://stripe.com/"
  },
  "bugs": {
    "url": "https://github.com/stripe/stripe-node/issues"
  },
  "bugs:": "https://github.com/stripe/stripe-node/issues",
  "contributors": [
    {
      "name": "Ask Bjørn Hansen",
      "email": "ask@develooper.com",
      "url": "http://www.askask.com/"
    },
    {
      "name": "Michelle Bu",
      "email": "michelle@stripe.com"
    },
    {
      "name": "Alex Sexton",
      "email": "alex@stripe.com"
    },
    {
      "name": "James Padolsey"
    }
  ],
  "dependencies": {
    "lodash.isplainobject": "^4.0.6",
    "qs": "~6.5.1",
    "safe-buffer": "^5.1.1"
  },
  "description": "Stripe API wrapper",
  "devDependencies": {
    "chai": "~4.1.2",
    "chai-as-promised": "~7.1.1",
    "coveralls": "^3.0.0",
    "eslint": "^4.19.1",
    "eslint-plugin-chai-friendly": "^0.4.0",
    "mocha": "~5.0.5",
    "nyc": "^11.3.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-SNGoKRgnyX0FGHrQ0xX4YmRKesMH4FEb6eQuDpZqi4mo7L/ctGS2vMWQfpdeIChwlSTGcgEAfc0l8q3IPZKTDA==",
    "shasum": "4a3703360da2070be0e74395d6554c5771d173c3",
    "tarball": "https://registry.npmjs.org/stripe/-/stripe-5.8.0.tgz",
    "fileCount": 108,
    "unpackedSize": 250898
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "f12c3d67822d5b9d3e96b1f1c1ac38d4302e0258",
  "homepage": "https://github.com/stripe/stripe-node",
  "keywords": [
    "stripe",
    "payment processing",
    "credit cards",
    "api"
  ],
  "license": "MIT",
  "main": "lib/stripe.js",
  "maintainers": [
    {
      "name": "bkrausz",
      "email": "briankrausz@gmail.com"
    },
    {
      "name": "brandur",
      "email": "brandur@mutelight.org"
    },
    {
      "name": "grey-stripe",
      "email": "grey@stripe.com"
    },
    {
      "name": "kjc",
      "email": "kjc@stripe.com"
    },
    {
      "name": "michelle",
      "email": "michelle@michellebu.com"
    },
    {
      "name": "ob-stripe",
      "email": "ob@stripe.com"
    },
    {
      "name": "slexaxton",
      "email": "alexsexton@gmail.com"
    },
    {
      "name": "stripejs",
      "email": "frontend-contact@stripe.com"
    }
  ],
  "name": "stripe",
  "optionalDependencies": {},
  "readme": "# Stripe Node.js Library\n\n[![Version](https://img.shields.io/npm/v/stripe.svg)](https://www.npmjs.org/package/stripe)\n[![Build Status](https://travis-ci.org/stripe/stripe-node.svg?branch=master)](https://travis-ci.org/stripe/stripe-node)\n[![Coverage Status](https://coveralls.io/repos/github/stripe/stripe-node/badge.svg)](https://coveralls.io/github/stripe/stripe-node)\n[![Downloads](https://img.shields.io/npm/dm/stripe.svg)](https://www.npmjs.com/package/stripe)\n[![Try on RunKit](https://badge.runkitcdn.com/stripe.svg)](https://runkit.com/npm/stripe)\n\nThe Stripe Node library provides convenient access to the Stripe API from\napplications written in server-side JavaScript.\n\nPlease keep in mind that this package is for use with server-side Node that\nuses Stripe secret keys. To maintain PCI compliance, tokenization of credit\ncard information should always be done with [Stripe.js][stripe-js] on the\nclient side. This package should not be used for that purpose.\n\n## Documentation\n\nSee the [Node API docs](https://stripe.com/docs/api/node#intro).\n\n## Installation\n\nInstall the package with:\n\n    npm install stripe --save\n\n## Usage\n\nThe package needs to be configured with your account's secret key which is\navailable in your [Stripe Dashboard][api-keys]. Require it with the key's\nvalue:\n\n``` js\nvar stripe = require('stripe')('sk_test_...');\n\nvar customer = await stripe.customers.create(\n  { email: 'customer@example.com' }\n);\n```\n\nOr with versions of Node.js prior to v7.9:\n\n``` js\nvar stripe = require('stripe')('sk_test_...');\n\nstripe.customers.create(\n  { email: 'customer@example.com' },\n  function(err, customer) {\n    err; // null if no error occurred\n    customer; // the created customer object\n  }\n);\n```\n\nOr using ES modules, this looks more like:\n\n``` js\nimport stripePackage from 'stripe';\nconst stripe = stripePackage('sk_test_...');\n//…\n```\n\n\nOr using TypeScript:\n\n``` ts\nimport * as Stripe from 'stripe';\nconst stripe = new Stripe('sk_test_...');\n//…\n```\n\n### Using Promises\n\nEvery method returns a chainable promise which can be used instead of a regular\ncallback:\n\n``` js\n// Create a new customer and then a new charge for that customer:\nstripe.customers.create({\n  email: 'foo-customer@example.com'\n}).then(function(customer){\n  return stripe.customers.createSource(customer.id, {\n    source: 'tok_visa'\n  });\n}).then(function(source) {\n  return stripe.charges.create({\n    amount: 1600,\n    currency: 'usd',\n    customer: source.customer\n  });\n}).then(function(charge) {\n  // New charge created on a new customer\n}).catch(function(err) {\n  // Deal with an error\n});\n```\n\n### Configuring Timeout\n\nRequest timeout is configurable (the default is Node's default of 120 seconds):\n\n``` js\nstripe.setTimeout(20000); // in ms (this is 20 seconds)\n```\n\n### Configuring For Connect\n\nA per-request `Stripe-Account` header for use with [Stripe Connect][connect]\ncan be added to any method:\n\n``` js\n// Retrieve the balance for a connected account:\nstripe.balance.retrieve({\n  stripe_account: 'acct_foo'\n}).then(function(balance) {\n  // The balance object for the connected account\n}).catch(function(err) {\n  // Error\n});\n```\n\n### Configuring a Proxy\n\nAn [https-proxy-agent][https-proxy-agent] can be configured with\n`setHttpAgent`.\n\nTo use stripe behind a proxy you can pass  to sdk:\n\n```js\nif (process.env.http_proxy) {\n  const ProxyAgent = require('https-proxy-agent');\n  stripe.setHttpAgent(new ProxyAgent(process.env.http_proxy));\n}\n```\n\n### Examining Responses\n\nSome information about the response which generated a resource is available\nwith the `lastResponse` property:\n\n```js\ncharge.lastResponse.requestId // see: https://stripe.com/docs/api/node#request_ids\ncharge.lastResponse.statusCode\n```\n\n### `request` and `response` events\n\nThe Stripe object emits `request` and `response` events.  You can use them like this:\n\n```js\nvar stripe = require('stripe')('sk_test_...');\n\nfunction onRequest(request) {\n  // Do something.\n}\n\n// Add the event handler function:\nstripe.on('request', onRequest);\n\n// Remove the event handler function:\nstripe.off('request', onRequest);\n```\n\n#### `request` object\n```js\n{\n  api_version: 'latest',\n  account: 'acct_TEST',       // Only present if provided\n  idempotency_key: 'abc123',  // Only present if provided\n  method: 'POST',\n  path: '/v1/charges'\n}\n```\n\n#### `response` object\n```js\n{\n  api_version: 'latest',\n  account: 'acct_TEST',       // Only present if provided\n  idempotency_key: 'abc123',  // Only present if provided\n  method: 'POST',\n  path: '/v1/charges',\n  status: 402,\n  request_id: 'req_Ghc9r26ts73DRf',\n  elapsed: 445                // Elapsed time in milliseconds\n}\n```\n\n### Webhook signing\n\nStripe can optionally sign the webhook events it sends to your endpoint, allowing you to validate that they were not sent by a third-party.  You can read more about it [here](https://stripe.com/docs/webhooks#signatures).\n\nPlease note that you must pass the _raw_ request body, exactly as received from Stripe, to the `constructEvent()` function; this will not work with a parsed (i.e., JSON) request body.\n\nYou can find an example of how to use this with [Express](https://expressjs.com/) in the [`examples/webhook-signing`](examples/webhook-signing) folder, but here's what it looks like:\n\n```js\nevent = stripe.webhooks.constructEvent(\n  webhookRawBody,\n  webhookStripeSignatureHeader,\n  webhookSecret\n);\n```\n\n### Writing a Plugin\n\nIf you're writing a plugin that uses the library, we'd appreciate it if you identified using `stripe.setAppInfo()`:\n\n```js\nstripe.setAppInfo({\n  name: 'MyAwesomePlugin',\n  version: '1.2.34', // Optional\n  url: 'https://myawesomeplugin.info', // Optional\n});\n```\n\nThis information is passed along when the library makes calls to the Stripe API.\n\n## More Information\n\n * [REST API Version](https://github.com/stripe/stripe-node/wiki/REST-API-Version)\n * [Error Handling](https://github.com/stripe/stripe-node/wiki/Error-Handling)\n * [Passing Options](https://github.com/stripe/stripe-node/wiki/Passing-Options)\n * [Using Stripe Connect](https://github.com/stripe/stripe-node/wiki/Using-Stripe-Connect-with-node.js)\n\n## Development\n\nRun all tests:\n\n```bash\n$ npm install\n$ npm test\n```\n\nRun a single test suite:\n\n```bash\n$ npm run mocha -- test/Error.spec.js\n```\n\nRun a single test (case sensitive):\n\n```bash\n$ npm run mocha -- test/Error.spec.js --grep 'Populates with type'\n```\n\nIf you wish, you may run tests using your Stripe *Test* API key by setting the\nenvironment variable `STRIPE_TEST_API_KEY` before running the tests:\n\n```bash\n$ export STRIPE_TEST_API_KEY='sk_test....'\n$ npm test\n```\n\n[api-keys]: https://dashboard.stripe.com/account/apikeys\n[connect]: https://stripe.com/connect\n[https-proxy-agent]: https://github.com/TooTallNate/node-https-proxy-agent\n[stripe-js]: https://stripe.com/docs/stripe.js\n\n<!--\n# vim: set tw=79:\n-->\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/stripe/stripe-node.git"
  },
  "scripts": {
    "clean": "rm -rf ./.nyc_output ./node_modules/.cache ./coverage",
    "coveralls": "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
    "lint": "eslint .",
    "mocha": "nyc mocha",
    "report": "nyc -r text -r lcov report",
    "test": "npm run lint && npm run mocha"
  },
  "version": "5.8.0"
}
